{"ast":null,"code":"/*\nconst mongoose = require('mongoose')\nconst bcrypt = require('bcrypt')\nconst {isEmail} = require('validator')\n\n\n//need to implement an employer user\n//copied from lesson*\n\n\nconst userSchema = new mongoose.Schema({\n    email: {\n        type: String,\n        required: [true, 'Pls enter an email'],\n        unique: true,\n        lowercase: true,\n        validator: [isEmail, 'Pls enter a valid email']\n    },\n    password: {\n        type: String,\n        required: [true, 'Please enter password'],\n        minlength: [6, 'Min length of password is 6']\n    }\n})\n\nuserSchema.pre('save', async function(next){\n    const salt = await bcrypt.genSalt();\n    this.password = await bcrypt.hash(this.password, salt);\n    next();\n\n})\n\n\nuserSchema.statics.login =  async function(email, password)\n{\n    const user = await this.findOne({email});\n    if(user)\n    {\n       const isAuth = await bcrypt.compare(password, user.password);\n       if(isAuth)\n       {\n        return user;\n       }\n       throw Error('incorrect password')\n\n    }\n    else{\n        throw Error('incorrect email')\n    }\n}\n\nconst User = mongoose.model('user', userSchema);\n\nmodule.exports = User; */","map":{"version":3,"names":[],"sources":["/Users/newmacmini/Downloads/GoJobAssignment/COMP229-GoJob/src/models/user.js"],"sourcesContent":["/*\nconst mongoose = require('mongoose')\nconst bcrypt = require('bcrypt')\nconst {isEmail} = require('validator')\n\n\n//need to implement an employer user\n//copied from lesson*\n\n\nconst userSchema = new mongoose.Schema({\n    email: {\n        type: String,\n        required: [true, 'Pls enter an email'],\n        unique: true,\n        lowercase: true,\n        validator: [isEmail, 'Pls enter a valid email']\n    },\n    password: {\n        type: String,\n        required: [true, 'Please enter password'],\n        minlength: [6, 'Min length of password is 6']\n    }\n})\n\nuserSchema.pre('save', async function(next){\n    const salt = await bcrypt.genSalt();\n    this.password = await bcrypt.hash(this.password, salt);\n    next();\n\n})\n\n\nuserSchema.statics.login =  async function(email, password)\n{\n    const user = await this.findOne({email});\n    if(user)\n    {\n       const isAuth = await bcrypt.compare(password, user.password);\n       if(isAuth)\n       {\n        return user;\n       }\n       throw Error('incorrect password')\n\n    }\n    else{\n        throw Error('incorrect email')\n    }\n}\n\nconst User = mongoose.model('user', userSchema);\n\nmodule.exports = User; */"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}